"""
Script para testar a vers√£o corrigida do CALCULOS FINAIS com indicadores de progresso
Vai monitorar se o script executa corretamente e onde pode estar travando
"""

import subprocess
import os
import sys
import time
import threading
from datetime import datetime

def monitor_execucao():
    """Monitora a execu√ß√£o do script principal"""
    
    script_principal = r"g:\PROJETOS PYTHON\aeronautas_azul\CODIGOS TERMINADOS\CALCULOS FINAIS - FINAL - COM PROGRESSO.py"
    
    if not os.path.exists(script_principal):
        print(f"‚ùå Script n√£o encontrado: {script_principal}")
        return
    
    print("üîÑ TESTANDO VERS√ÉO CORRIGIDA COM INDICADORES DE PROGRESSO")
    print("="*70)
    print(f"üìÑ Script: {os.path.basename(script_principal)}")
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%H:%M:%S')}")
    print("="*70)
    
    # Op√ß√µes de teste
    print("\\nEscolha o tipo de teste:")
    print("1 - Execu√ß√£o completa (pode demorar)")
    print("2 - Execu√ß√£o com timeout de 5 minutos")
    print("3 - Execu√ß√£o interativa (voc√™ pode parar manualmente)")
    
    escolha = input("\\nDigite sua escolha (1-3): ").strip()
    
    timeout = None
    if escolha == "2":
        timeout = 300  # 5 minutos
    
    print(f"\\nüöÄ Iniciando teste...")
    print("üí° Observe os indicadores de progresso para identificar onde pode travar")
    print("‚ö†Ô∏è Pressione Ctrl+C para interromper se necess√°rio")
    print("-" * 70)
    
    try:
        # Executar o script
        if timeout:
            processo = subprocess.Popen(
                [sys.executable, script_principal],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # Monitorar com timeout
            try:
                stdout, stderr = processo.communicate(timeout=timeout)
                codigo_retorno = processo.returncode
                
                print("\\n" + "="*70)
                print("‚úÖ EXECU√á√ÉO CONCLU√çDA DENTRO DO TIMEOUT")
                print(f"üî¢ C√≥digo de retorno: {codigo_retorno}")
                
                if stdout:
                    print("\\nüì§ SA√çDA PADR√ÉO:")
                    print(stdout[-2000:])  # √öltimas 2000 chars
                
                if stderr:
                    print("\\n‚ùå ERROS:")
                    print(stderr[-1000:])  # √öltimos 1000 chars
                    
            except subprocess.TimeoutExpired:
                processo.kill()
                print("\\n" + "="*70)
                print(f"‚è∞ TIMEOUT DE {timeout}s ATINGIDO - PROCESSO INTERROMPIDO")
                print("üîç O script pode estar travado em algum ponto")
                print("üí° Use o script de investiga√ß√£o para identificar o problema")
                
        else:
            # Execu√ß√£o normal
            resultado = subprocess.run(
                [sys.executable, script_principal],
                capture_output=True,
                text=True
            )
            
            print("\\n" + "="*70)
            print("‚úÖ EXECU√á√ÉO CONCLU√çDA")
            print(f"üî¢ C√≥digo de retorno: {resultado.returncode}")
            
            if resultado.stdout:
                print("\\nüì§ SA√çDA PADR√ÉO:")
                print(resultado.stdout[-2000:])  # √öltimas 2000 chars
            
            if resultado.stderr:
                print("\\n‚ùå ERROS:")
                print(resultado.stderr[-1000:])  # √öltimos 1000 chars
    
    except KeyboardInterrupt:
        print("\\n\\n‚ö†Ô∏è EXECU√á√ÉO INTERROMPIDA PELO USU√ÅRIO")
    except Exception as e:
        print(f"\\n‚ùå ERRO DURANTE EXECU√á√ÉO: {e}")
    
    print("\\n" + "="*70)
    print(f"‚è∞ Fim: {datetime.now().strftime('%H:%M:%S')}")
    print("üìã TESTE CONCLU√çDO")
    print("="*70)

def verificar_estrutura_arquivo():
    """Verifica se o arquivo tem as corre√ß√µes aplicadas"""
    
    script_principal = r"g:\PROJETOS PYTHON\aeronautas_azul\CODIGOS TERMINADOS\CALCULOS FINAIS - FINAL - COM PROGRESSO.py"
    
    print("üîç VERIFICANDO CORRE√á√ïES APLICADAS")
    print("="*50)
    
    try:
        with open(script_principal, 'r', encoding='utf-8') as f:
            conteudo = f.read()
        
        # Verificar se tem indicadores de progresso
        tem_progresso = "mostrar_progresso_etapa" in conteudo
        print(f"‚úÖ Indicadores de progresso: {'SIM' if tem_progresso else 'N√ÉO'}")
        
        # Verificar se a vari√°vel foi corrigida
        tem_erro_variavel = "atividades_excluidos" in conteudo
        print(f"‚úÖ Erro de vari√°vel corrigido: {'N√ÉO' if tem_erro_variavel else 'SIM'}")
        
        # Verificar se tem imports necess√°rios
        tem_time = "import time" in conteudo
        print(f"‚úÖ Import time adicionado: {'SIM' if tem_time else 'N√ÉO'}")
        
        # Contar indicadores de progresso
        count_progresso = conteudo.count("mostrar_progresso_etapa")
        print(f"üìä N√∫mero de indicadores encontrados: {count_progresso}")
        
        if tem_progresso and not tem_erro_variavel and tem_time:
            print("\\n‚úÖ ARQUIVO PARECE ESTAR CORRIGIDO")
        else:
            print("\\n‚ö†Ô∏è ARQUIVO PODE PRECISAR DE MAIS CORRE√á√ïES")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar arquivo: {e}")
    
    print("="*50)

if __name__ == "__main__":
    print("üß™ TESTE DO CALCULOS FINAIS CORRIGIDO")
    print("="*50)
    
    # Primeiro verificar se as corre√ß√µes est√£o aplicadas
    verificar_estrutura_arquivo()
    
    print("\\n")
    continuar = input("Deseja continuar com o teste de execu√ß√£o? (s/n): ").strip().lower()
    
    if continuar in ['s', 'sim', 'y', 'yes']:
        monitor_execucao()
    else:
        print("üõë Teste cancelado pelo usu√°rio")
