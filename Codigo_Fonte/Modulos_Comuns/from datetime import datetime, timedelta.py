from datetime import datetime, timedelta

def classificar_horas_trabalhadas(checkin, checkout, feriados=None):
    """
    Classifica as horas trabalhadas em categorias espec√≠ficas.
    
    Regras:
    1. Noturno: 18:00 √†s 06:00
    2. Especiais:
       - Domingos at√© √†s 21:00
       - Feriados at√© √†s 21:00
       - S√°bados a partir das 21:00
       - V√©speras de feriado a partir das 21:00
    
    Args:
        checkin (str): Data/hora de entrada no formato 'YYYY-MM-DD HH:MM:SS'
        checkout (str): Data/hora de sa√≠da no formato 'YYYY-MM-DD HH:MM:SS'
        feriados (list): Lista de datas de feriados no formato 'YYYY-MM-DD'
    
    Returns:
        dict: Horas classificadas por categoria
    """
    
    # Converter strings para datetime
    dt_checkin = datetime.strptime(checkin, '%Y-%m-%d %H:%M:%S')
    dt_checkout = datetime.strptime(checkout, '%Y-%m-%d %H:%M:%S')
    
    # Lista de feriados (se n√£o fornecida, usar lista vazia)
    if feriados is None:
        feriados = []
    
    # Converter feriados para objetos date
    feriados_dates = [datetime.strptime(f, '%Y-%m-%d').date() for f in feriados]
    
    # Verificar se √© v√©spera de feriado
    def is_vespera_feriado(data):
        data_seguinte = data + timedelta(days=1)
        return data_seguinte.date() in feriados_dates
    
    # Inicializar contadores como timedelta
    resultado = {
        'hora_diurna_normal': timedelta(),
        'hora_noturna_normal': timedelta(),
        'hora_especial_diurna': timedelta(),
        'hora_especial_noturna': timedelta(),
        'detalhes': []
    }
    
    # Processar por per√≠odos definidos pelos marcos hor√°rios
    atual = dt_checkin
    
    while atual < dt_checkout:
        # Determinar pr√≥ximo marco hor√°rio relevante
        proximos_marcos = []
        
        # Marco das 18:00 (in√≠cio noturno)
        marco_18h = atual.replace(hour=18, minute=0, second=0, microsecond=0)
        if marco_18h > atual:
            proximos_marcos.append(marco_18h)
        elif marco_18h <= atual:
            # Pr√≥ximo dia √†s 18:00
            marco_18h = marco_18h + timedelta(days=1)
            proximos_marcos.append(marco_18h)
        
        # Marco das 06:00 (fim noturno)
        marco_06h = atual.replace(hour=6, minute=0, second=0, microsecond=0)
        if marco_06h > atual:
            proximos_marcos.append(marco_06h)
        elif marco_06h <= atual:
            # Pr√≥ximo dia √†s 06:00
            marco_06h = marco_06h + timedelta(days=1)
            proximos_marcos.append(marco_06h)
        
        # Marco das 21:00 (limite especial domingo/feriado ou in√≠cio especial s√°bado/v√©spera)
        marco_21h = atual.replace(hour=21, minute=0, second=0, microsecond=0)
        if marco_21h > atual:
            proximos_marcos.append(marco_21h)
        elif marco_21h <= atual:
            # Pr√≥ximo dia √†s 21:00
            marco_21h = marco_21h + timedelta(days=1)
            proximos_marcos.append(marco_21h)
        
        # Marco da meia-noite (mudan√ßa de dia)
        marco_00h = atual.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
        if marco_00h > atual:
            proximos_marcos.append(marco_00h)
        
        # Escolher o pr√≥ximo marco mais pr√≥ximo (ou final do per√≠odo)
        proximos_marcos.append(dt_checkout)
        proxima = min(proximos_marcos)
        
        # Calcular dura√ß√£o do per√≠odo atual como timedelta
        duracao = proxima - atual
        
        # Determinar tipo de hora baseado no hor√°rio de IN√çCIO do per√≠odo
        hora_atual = atual.hour
        dia_semana = atual.weekday()  # 0=segunda, 6=domingo
        data_atual = atual.date()
        
        # Verificar se √© per√≠odo noturno (18:00 √†s 06:00)
        is_noturno = hora_atual >= 18 or hora_atual < 6
        
        # Verificar se √© per√≠odo especial
        is_especial = False
        motivo_especial = ""
        
        # Domingo (at√© √†s 21:00)
        if dia_semana == 6 and hora_atual < 21:
            is_especial = True
            motivo_especial = "Domingo"
        
        # Feriado (at√© √†s 21:00)
        elif data_atual in feriados_dates and hora_atual < 21:
            is_especial = True
            motivo_especial = "Feriado"
        
        # S√°bado a partir das 21:00
        elif dia_semana == 5 and hora_atual >= 21:
            is_especial = True
            motivo_especial = "S√°bado ap√≥s 21:00"
        
        # V√©spera de feriado a partir das 21:00
        elif is_vespera_feriado(atual) and hora_atual >= 21:
            is_especial = True
            motivo_especial = "V√©spera de feriado ap√≥s 21:00"
        
        # Classificar em uma das 4 categorias
        if is_noturno and is_especial:
            resultado['hora_especial_noturna'] += duracao
            categoria = "Hora Especial Noturna"
        elif is_noturno:
            resultado['hora_noturna_normal'] += duracao
            categoria = "Hora Noturna Normal"
        elif is_especial:
            resultado['hora_especial_diurna'] += duracao
            categoria = "Hora Especial Diurna"
        else:
            resultado['hora_diurna_normal'] += duracao
            categoria = "Hora Diurna Normal"
        
        # Adicionar aos detalhes
        resultado['detalhes'].append({
            'inicio': atual.strftime('%Y-%m-%d %H:%M:%S'),
            'fim': proxima.strftime('%Y-%m-%d %H:%M:%S'),
            'duracao': formatar_timedelta(duracao),
            'categoria': categoria,
            'motivo_especial': motivo_especial if is_especial else None
        })
        
        # Avan√ßar para pr√≥ximo per√≠odo
        atual = proxima
    
    return resultado

def formatar_timedelta(td):
    """
    Converte timedelta para formato HH:MM
    """
    total_seconds = int(td.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    return f"{hours:02d}:{minutes:02d}"

def exibir_classificacao(resultado):
    """
    Exibe a classifica√ß√£o das horas de forma organizada
    """
    print("=" * 60)
    print("CLASSIFICA√á√ÉO DE HORAS TRABALHADAS")
    print("=" * 60)
    
    print(f"\nüìä RESUMO POR CATEGORIA:")
    print(f"   Hora Diurna Normal: {formatar_timedelta(resultado['hora_diurna_normal'])}")
    print(f"   Hora Noturna Normal: {formatar_timedelta(resultado['hora_noturna_normal'])}")
    print(f"   Hora Especial Diurna: {formatar_timedelta(resultado['hora_especial_diurna'])}")
    print(f"   Hora Especial Noturna: {formatar_timedelta(resultado['hora_especial_noturna'])}")
    
    total = (resultado['hora_diurna_normal'] + 
             resultado['hora_noturna_normal'] + 
             resultado['hora_especial_diurna'] + 
             resultado['hora_especial_noturna'])
    print(f"   TOTAL: {formatar_timedelta(total)}")

# Exemplo de uso
if __name__ == "__main__":
    # Exemplo com o caso apresentado
    checkin = "2017-11-05 17:16:00"
    checkout = "2017-11-06 07:35:00"
    
    # Lista de feriados (exemplo)
    feriados = ["2017-11-15", "2017-12-25"]
    
    resultado = classificar_horas_trabalhadas(checkin, checkout, feriados)
    exibir_classificacao(resultado)
